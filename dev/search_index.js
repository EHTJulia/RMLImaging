var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RMLImaging","category":"page"},{"location":"#RMLImaging","page":"Home","title":"RMLImaging","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RMLImaging.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RMLImaging]","category":"page"},{"location":"#RMLImaging.AbstractFourierTransform","page":"Home","title":"RMLImaging.AbstractFourierTransform","text":"AbstractFourierTransform\n\nAbstract type for Fourier Transform Operators.\n\n\n\n\n\n","category":"type"},{"location":"#RMLImaging.AbstractImageModel","page":"Home","title":"RMLImaging.AbstractImageModel","text":"AbstractImageModel\n\nMandatory fields\n\nOptional methods\n\nMandatory methods\n\nOptional methods\n\n\n\n\n\n","category":"type"},{"location":"#RMLImaging.AbstractRegularizer","page":"Home","title":"RMLImaging.AbstractRegularizer","text":"AbstractRegularizer\n\nMandatory fields\n\nhyperparameter::Number: the hyper parameter of the regularization function. In default, it should be a number.\ndomain::RegularizerDomain: the domain of the image space where the regularization function will be computed.\n\nMandatory methods\n\nevaluate(::AbstractRegularizerDomain, ::AbstractRegularizer, ::AbstractImageModel, ::AbstractArray):    Evaluate the regularization function for the given input sky image.\nevaluate(::AbstractRegularizer, ::AbstractImageModel, ::AbstractArray):    Evaluate the regularization function for the given input sky image.\ncost(::AbstractRegularizer, ::AbstractImageModel, ::AbstractArray):    Evaluate the cost function for the given input sky image. The cost function is defined by the product of its hyperparameter and regularization function.\n``\n\n\n\n\n\n","category":"type"},{"location":"#RMLImaging.AbstractUVCoverage","page":"Home","title":"RMLImaging.AbstractUVCoverage","text":"Abstract type for uv-coverages.\n\n\n\n\n\n","category":"type"},{"location":"#RMLImaging.FourierTransform2D","page":"Home","title":"RMLImaging.FourierTransform2D","text":"FourierTransform2D <: AbstractFourierTransform\n\nAbstract type for Fourier Transform Operators of a single 2D image.\n\n\n\n\n\n","category":"type"},{"location":"#RMLImaging.KLEntropy","page":"Home","title":"RMLImaging.KLEntropy","text":"KLEntropy <: AbstractRegularizer\n\nRegularizer using the Kullback-Leibler divergence (or a relative entropy).\n\nfields\n\nhyperparameter::Number: the hyperparameter of the regularizer\nprior: the prior image.\ndomain::AbstractRegularizerDomain: the image domain where the regularization funciton will be computed.   KLEntropy can be computed only in LinearDomain().\n\n\n\n\n\n","category":"type"},{"location":"#RMLImaging.L1Norm","page":"Home","title":"RMLImaging.L1Norm","text":"L1Norm <: AbstractRegularizer\n\nRegularizer using the l1-norm.\n\nfields\n\nhyperparameter::Number: the hyperparameter of the regularizer\nweight: the weight of the regularizer, which could be a number or an array.\ndomain::AbstractRegularizerDomain: the image domain where the regularization funciton will be computed. L1Norm can be computed only in LinearDomain().\n\n\n\n\n\n","category":"type"},{"location":"#RMLImaging.SingleNFFT2D","page":"Home","title":"RMLImaging.SingleNFFT2D","text":"SingleNFFT2D(nfft_fwd, nfft_adj, vnorm) <: FourierTransform2D\n\nA Fourier Transform Operator of a single 2D Image using NFFT.\n\nFields\n\nnfft_fwd: NFFT operator for the forward transform\nnfft_adj: NFFT operator for the adjoint transform\nVkernel: the factor (phase shift, pulse funciton, kernel, etc) to be multipled by the forward-transformed visibilities.\n\n\n\n\n\n","category":"type"},{"location":"#RMLImaging.SingleUVCoverage","page":"Home","title":"RMLImaging.SingleUVCoverage","text":"SingleUVCoverage(u, v, reverse_idx) <: AbstractUVCoverage\n\nA basic type for single uv-coverage.\n\nArguemnts:\n\nu::Vector\nv::Vector\nreverse_idx::Vector\n\n\n\n\n\n","category":"type"},{"location":"#RMLImaging.TSV","page":"Home","title":"RMLImaging.TSV","text":"TSV <: AbstractRegularizer\n\nRegularizer using the Istropic Total Squared Variation \n\nfields\n\nhyperparameter::Number: the hyperparameter of the regularizer\nweight: the weight of the regularizer, which may be used for multi-dimensional images.\ndomain::AbstractRegularizerDomain: the image domain where the regularization funciton will be computed.\n\n\n\n\n\n","category":"type"},{"location":"#RMLImaging.TV","page":"Home","title":"RMLImaging.TV","text":"TV <: AbstractRegularizer\n\nRegularizer using the Istropic Total Variation \n\nfields\n\nhyperparameter::Number: the hyperparameter of the regularizer\nweight: the weight of the regularizer, which may be used for multi-dimensional images.\ndomain::AbstractRegularizerDomain: the image domain where the regularization funciton will be computed.\n\n\n\n\n\n","category":"type"},{"location":"#Base.map!-Tuple{EHTImages.AbstractEHTImage, Imager2D, AbstractArray}","page":"Home","title":"Base.map!","text":"map!(image::EHTImages.AbstractEHTImage, imager::Imager2D, x::AbstractArray[, idx])\n\n\n\n\n\n","category":"method"},{"location":"#Base.map-Tuple{EHTImages.AbstractEHTImage, Imager2D, AbstractArray}","page":"Home","title":"Base.map","text":"map(image::EHTImages.AbstractEHTImage, imager::Imager2D, x::AbstractArray[, idx])\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.ImagingProblem-Tuple{Imager2D, AbstractArray}","page":"Home","title":"RMLImaging.ImagingProblem","text":"ImagingProblem(imager::Imager2D, x0::AbstractArray)\n\nInitialize Optimization.OptimizationProblem for RML Imaging. Returns the initialized Optimization.OptimizationProblem object.\n\nArguments\n\nimager::Imager2D: the imager\nx0::AbstractArray: the initial image in the parameter domain.\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.ImagingProblem-Tuple{Imager2D, EHTImages.AbstractEHTImage}","page":"Home","title":"RMLImaging.ImagingProblem","text":"ImagingProblem(imager::Imager2D, initialimage::AbstractEHTImage)\n\nInitialize Optimization.OptimizationProblem for RML Imaging. Returns the initialized Optimization.OptimizationProblem object.\n\nArguments\n\nimager::Imager2D: the imager\nx0::AbstractArray: the initial image in the parameter domain.\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.cost-Tuple{RMLImaging.AbstractRegularizer, RMLImaging.AbstractImageModel, AbstractArray}","page":"Home","title":"RMLImaging.cost","text":"cost(reg::AbstractRegularizer, skymodel::AbstractImageModel, x::AbstractArray)\n\nCompute the cost function of the given regularization function for the given image parameters on the given image model. In default, this should return reg.hyperparameter .* evaluate(reg, skymodel, x).\n\nArguments\n\nreg::AbstractRegularizer: the regularization function.\nskymodel::AbstractImageModel: the model of the input image\nx::AbstractArray: the parameters of the input image\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.domain-Tuple{RMLImaging.AbstractRegularizer}","page":"Home","title":"RMLImaging.domain","text":"domain(reg::AbstractRegularizer) = reg.domain\n\nReturn the computing domain of the given regularizer.\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.evaluate-Tuple{Imager2D, AbstractArray}","page":"Home","title":"RMLImaging.evaluate","text":"evaluate(imager::Imager2D, x::AbstractArray)\n\nEvaluate chisquares and regularizers from the input image parameters\n\nArguments\n\nimager::Imager2D: RML Imaging Setting\nx::AbstractArray: the image parameters\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.evaluate-Tuple{Imager2D, EHTImages.AbstractEHTImage}","page":"Home","title":"RMLImaging.evaluate","text":"evaluate(imager::Imager2D, image::AbstractEHTImage)\n\nEvaluate chisquares and regularizers from the input image\n\nArguments\n\nimager::Imager2D: RML Imaging Setting\nimage::AbstractEHTImage: the image\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.evaluate-Tuple{LinearDomain, L1Norm, RMLImaging.AbstractImage2DModel, AbstractArray}","page":"Home","title":"RMLImaging.evaluate","text":"evaluate(::AbstractRegularizer, skymodel::AbstractImage2DModel, x::AbstractArray)\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.evaluate-Tuple{RMLImaging.AbstractRegularizer, RMLImaging.AbstractImageModel, AbstractArray}","page":"Home","title":"RMLImaging.evaluate","text":"evaluate(reg::AbstractRegularizer, skymodel::AbstractImageModel, x::AbstractArray)\n\nCompute the value of the given regularization function for the given image parameters on the given image model. In default, return evaluate(domain(reg), reg, skymodel, x).\n\nArguments\n\nreg::AbstractRegularizer: the regularization function.\nskymodel::AbstractImageModel: the model of the input image\nx::AbstractArray: the parameters of the input image\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.evaluate-Tuple{RMLImaging.AbstractRegularizerDomain, RMLImaging.AbstractRegularizer, RMLImaging.AbstractImageModel, AbstractArray}","page":"Home","title":"RMLImaging.evaluate","text":"evaluate(domain::AbstractRegularizerDomain, reg::AbstractRegularizer, skymodel::AbstractImageModel, x::AbstractArray)\n\nCompute the value of the given regularization function for the given image parameters on the given image model. In default, return 0.\n\nArguments\n\ndomain::AbstractRegularizerDomain: the domain of the image where the regularization function will be computed.\nreg::AbstractRegularizer: the regularization function.\nskymodel::AbstractImageModel: the model of the input image\nx::AbstractArray: the parameters of the input image\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.hyperparameter-Tuple{RMLImaging.AbstractRegularizer}","page":"Home","title":"RMLImaging.hyperparameter","text":"hyperparameter(reg::AbstractRegularizer) = reg.hyperparameter\n\nReturn the hyperparameter of the given regularizer.\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.klentropy_base-Tuple{AbstractArray, AbstractArray}","page":"Home","title":"RMLImaging.klentropy_base","text":"klentropy_base(x::AbstractArray, p::AbstractArray)\n\nBase function of the l1norm.\n\nArguments\n\nI::AbstractArray: the image\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.l1norm-Tuple{AbstractArray, AbstractArray}","page":"Home","title":"RMLImaging.l1norm","text":"l1norm(I::AbstractArray, w::Number)\n\nBase function of the l1norm.\n\nArguments\n\nI::AbstractArray: the image\nw::AbstractArray: the regularization weight which should have the same size with I\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.l1norm-Tuple{AbstractArray, Number}","page":"Home","title":"RMLImaging.l1norm","text":"l1norm(I::AbstractArray, w::Number)\n\nBase function of the l1norm.\n\nArguments\n\nI::AbstractArray: the image\nw::Number: the regularization weight\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.l1norm-Tuple{AbstractArray}","page":"Home","title":"RMLImaging.l1norm","text":"l1norm(I::AbstractArray)\n\nBase function of the l1norm.\n\nArguments\n\nI::AbstractArray: the image\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.lossfunc-Tuple{Any, Imager2D}","page":"Home","title":"RMLImaging.lossfunc","text":"lossfunc(x, imager::Imager2D)\n\nThe Loss function for the basic 2-dimensional RML Imaging problem. Returns the cost function.\n\nArguments\n\nx::AbstractArray: the image parameters\nimager::Imager2D: RML Imaging Setting\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.transform_linear_forward-Tuple{RMLImaging.AbstractImageModel, AbstractArray}","page":"Home","title":"RMLImaging.transform_linear_forward","text":"transform_linear_forward(model::AbstractImageModel, x::AbstractArray)\n\nConvert the input array of the image model parameters into the corresponding array of the linear-scale intensity map. This is supposed to be the inverse funciton of transform_linear_inverse.\n\nArguments\n\nmodel::AbstractImageModel: the image model\nx::AbstractArray: the array of the image model parameters\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.transform_linear_inverse-Tuple{RMLImaging.AbstractImageModel, AbstractArray}","page":"Home","title":"RMLImaging.transform_linear_inverse","text":"transform_linear_forward(model::AbstractImageModel, x::AbstractArray)\n\nConvert the input array of the linear-scale intensity map into the array of the  corresponding model parameters. This is supposed to be the inverse funciton of transform_linear_forward.\n\nArguments\n\nmodel::AbstractImageModel: the image model\nx::AbstractArray: the array of the linear-scale intensity map\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.tsv_base_real-Tuple{AbstractArray, Number}","page":"Home","title":"RMLImaging.tsv_base_real","text":"tsv_base_real(I::AbstractArray, w::Number)\n\nBase function of the istropic total squared Variation.\n\nArguments\n\nI::AbstractArray: the input two dimensional real image\nw::Number: the regularization weight\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.tsv_base_real-Tuple{AbstractArray}","page":"Home","title":"RMLImaging.tsv_base_real","text":"tsv_base_real(I::AbstractArray)\n\nBase function of the istropic total squared Variation.\n\nArguments\n\nI::AbstractArray: the input two dimensional real image\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.tv_base_real-Tuple{AbstractArray, Number}","page":"Home","title":"RMLImaging.tv_base_real","text":"tv_base_real(I::AbstractArray, w::Number)\n\nBase function of the istropic total variation.\n\nArguments\n\nI::AbstractArray: the input two dimensional real image\nw::Number: the regularization weight\n\n\n\n\n\n","category":"method"},{"location":"#RMLImaging.tv_base_real-Tuple{AbstractArray}","page":"Home","title":"RMLImaging.tv_base_real","text":"tv_base_real(I::AbstractArray)\n\nBase function of the istropic total variation.\n\nArguments\n\nI::AbstractArray: the input two dimensional real image\n\n\n\n\n\n","category":"method"}]
}
